TABELA 1 – Desempenho (Throughput / Tempo de Execução)

| Linguagem                | Desempenho médio (C = 1.0)
|--------------------------|----------------------------|
| Rust                     | 0.90 (10%)                 |
| Java (GraalVM Native)    | 0.75                       |
| C# (.NET JIT)            | 0.65                       |
| Java (HotSpot JIT)       | 0.60                       |
| Python (CPython)         | 0.15                       |

TABELA 2 – Memory Footprint (Uso de memória na inicialização)

| Linguagem                | Uso de Memória (MB)       |
|--------------------------|---------------------------|
| Rust                     | 30–50 MB                  |
| Java (GraalVM Native)    | 80–120 MB                 |
| C# (.NET Core)           | 100–150 MB                |
| Python (CPython)         | 150–200 MB                |
| Java (HotSpot)           | 200–300 MB                |

TABELA 3 – Uso de Memória com 1 Milhão de Tarefas Concorrentes

| Linguagem                | Memória por Task (KB)     | Total para 1M Tasks        |
|--------------------------|---------------------------|----------------------------|
| Rust                     | ~0.05 KB                  | ~50 MB                     |
| C# (.NET)                | ~0.1 KB                   | ~100 MB                    |
| Java (GraalVM Native)    | ~0.15 KB                  | ~150 MB                    |
| Java (HotSpot)           | ~0.5 KB                   | ~500 MB                    |
| Python                   | ~2.0 KB                   | ~2 GB                      |

O que isto significa?

Acho sempre importante ponderar a necessidade de uma linguagem de programação para um determinado projeto.
A linguagem de programação é apenas um meio para atingir um objetivo.


